= Bandit

Bandit is intended as a solution to the Multi-armed bandit problem. See http://en.wikipedia.org/wiki/Multi-armed_bandit for details.

= Terminology

*Entity*:     The thing that you are trying to control.  In an e-commerce setting this could be a website user.

*Features*:   Things you know about each entity. These should be nominal attributes. Following the e-commerce example, this could be the hour of the users first visit.

*Strategies*: These are all the actions your system can take on the entities. For example, you could send an email to a user. Each strategy should have a cost associated with it.

*Responses*:  These are all the actions that the entities in question can take.  For example, a user can complete a profile questionaire. Each response should have a value associated with it.

*Values*:     This is the abstract value associated with strategies and responses.  Good things should be positive, bad things should be negative.

= Notes

The probability of a feature can be found by counting instances: p( f | s, r ) from COUNT( f, s, r )

The probability of a given response can be inferred via Bayes theorem: p( r | s, f ) = Norm( Pi_i( p( f_i | s, r ) ) * p( s | r ) *  p( r ) )

The overall value can be estimated v( s | f ) = sum_r( p( r | f, s ) * v( r ) ) + v( s )

The overall values for each strategy can be compared, and the best one selected

Several strategy selection algorithms can be used. In general, these will fall on the spectrum between pure explaore (choose a random strategy) and pure explot (choose the strategy with the highest expected value).

= Architecture

Counts leading to probability calculations performed on (denormalized for performance) calculation table. This table should be generated dynamically.

Main storage performed on snoflake schema with events (performed strategies and responses) as facts. Strategies, responses, and entities are dimensions.

Should allow for binding of arbitary features to entities.

Updates to calculation table decoupled from normalized tables.

= TO DO

Write a configuration dsl for specifying features, strategies and reactions.  run rake task, which generates migration ??

High level model should include hooks for creating, updating and destroying rows in the main table, potentially based on other tables within the app

= Examples

== Contributing to bandit
 
* Check out the latest master to make sure the feature hasn't been implemented or the bug hasn't been fixed yet
* Check out the issue tracker to make sure someone already hasn't requested it and/or contributed it
* Fork the project
* Start a feature/bugfix branch
* Commit and push until you are happy with your contribution
* Make sure to add tests for it. This is important so I don't break it in a future version unintentionally.
* Please try not to mess with the Rakefile, version, or history. If you want to have your own version, or is otherwise necessary, that is fine, but please isolate to its own commit so I can cherry-pick around it.

== Copyright

Copyright (c) 2011 Ben Doyle. See LICENSE.txt for
further details.

